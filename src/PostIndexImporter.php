<?php

namespace App;

use App\Repositories\PostIndexRepository;
use App\Services\ExcelParser;
use App\Services\FileDownloader;
use App\Services\FileExtractor;

/**
 * –ö–ª–∞—Å –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É –ø–æ—à—Ç–æ–≤–∏—Ö —ñ–Ω–¥–µ–∫—Å—ñ–≤.
 */
class PostIndexImporter
{
    private FileDownloader $downloader;
    private FileExtractor $extractor;
    private ExcelParser $parser;
    private PostIndexRepository $repository;
    private string $zipPath;
    private string $filePath;
    private string $zipUrl;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—É.
     *
     * @param FileDownloader $downloader –°–µ—Ä–≤—ñ—Å –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
     * @param FileExtractor $extractor –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–∑–ø–∞–∫—É–≤–∞–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É
     * @param ExcelParser $parser –°–µ—Ä–≤—ñ—Å –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É Excel-—Ñ–∞–π–ª—É
     * @param PostIndexRepository $repository –†–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
     * @param string $zipUrl URL-–∞–¥—Ä–µ—Å–∞ –∞—Ä—Ö—ñ–≤—É –∑ —ñ–Ω–¥–µ–∫—Å–∞–º–∏
     */
    public function __construct(
        FileDownloader $downloader,
        FileExtractor $extractor,
        ExcelParser $parser,
        PostIndexRepository $repository,
        string $zipUrl
    ) {
        $this->downloader = $downloader;
        $this->extractor = $extractor;
        $this->parser = $parser;
        $this->repository = $repository;
        $this->zipPath = __DIR__ . "/postindex.zip";
        $this->filePath = __DIR__ . "/postindex.xlsx";
        $this->zipUrl = $zipUrl;
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫—É —ñ–º–ø–æ—Ä—Ç—É –ø–æ—à—Ç–æ–≤–∏—Ö —ñ–Ω–¥–µ–∫—Å—ñ–≤.
     *
     * @return void
     */
    public function run(): void
    {
        // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ZIP-—Ñ–∞–π–ª—É
        if (!$this->downloader->download($this->zipUrl, $this->zipPath)) {
            die("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ZIP!\n");
        }

        // –†–æ–∑–ø–∞–∫–æ–≤–∫–∞ ZIP-—Ñ–∞–π–ª—É
        if (!$this->extractor->extract($this->zipPath, __DIR__)) {
            die("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø–∞–∫–æ–≤–∫–∏ ZIP!\n");
        }

        // –ü–∞—Ä—Å–∏–Ω–≥ XLSX-—Ñ–∞–π–ª—É
        $rows = $this->parser->parse($this->filePath);
        $startRow = $this->findStartRow($rows);

        // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        $this->repository->createTempTable();
        $this->importData(array_slice($rows, $startRow));
        $this->repository->updateMainTable();
        $deleted = $this->repository->deleteOldRecords();

        echo "üóë –í–∏–¥–∞–ª–µ–Ω–æ $deleted –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö –∑–∞–ø–∏—Å—ñ–≤!\n";

        // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
        unlink($this->zipPath);
        unlink($this->filePath);
        echo "üîπ –¢–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏ –≤–∏–¥–∞–ª–µ–Ω–æ.\n";
    }

    /**
     * –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ –∑ –¥–∞–Ω–∏–º–∏ —É —Ñ–∞–π–ª—ñ.
     *
     * @param array $rows –ú–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ —ñ–∑ XLSX
     * @return int –Ü–Ω–¥–µ–∫—Å –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥–∫–∞ –∑ –¥–∞–Ω–∏–º–∏
     */
    private function findStartRow(array $rows): int
    {
        foreach ($rows as $index => $row) {
            if (!empty(array_filter($row))) {
                return $index + 1;
            }
        }
        return 0;
    }

    /**
     * –Ü–º–ø–æ—Ä—Ç—É—î –¥–∞–Ω—ñ —É –±–∞–∑—É.
     *
     * @param array $rows –ú–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ —ñ–∑ XLSX
     * @return void
     */
    private function importData(array $rows): void
    {
        $uniqueRows = [];
        $totalCount = 0;

        foreach ($rows as $row) {
            // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∞–±–æ –Ω–µ–ø–æ–≤–Ω—ñ —Ä—è–¥–∫–∏
            if (count(array_filter($row)) < 5 || empty($row[11])) continue;

            // –í–∏–¥–∞–ª—è—î–º–æ –ø—É—Å—Ç—ñ –ø–µ—Ä—à—ñ —Å—Ç–æ–≤–ø—Ü—ñ, —è–∫—â–æ —Ç–∞–∫—ñ —î
            while (empty($row[0]) && count($row) > 1) {
                array_shift($row);
            }

            // –û–±—Ä—ñ–∑–∞—î–º–æ –º–∞—Å–∏–≤ –¥–æ 11 –∫–æ–ª–æ–Ω–æ–∫
            $row = array_slice($row, 0, 11);
            $postalCode = $row[4] ?? null;

            // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ –∑–∞ –ø–æ—à—Ç–æ–≤–∏–º —ñ–Ω–¥–µ–∫—Å–æ–º
            if ($postalCode === null || isset($uniqueRows[$postalCode])) continue;

            $uniqueRows[$postalCode] = true;
            $this->repository->insertIntoTemp($row);

            // –í–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 1000 –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
            if (++$totalCount % 1000 === 0) {
                echo "‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ $totalCount —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤...\n";
            }
        }
        echo "‚úÖ –í—Å—å–æ–≥–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ: $totalCount –∑–∞–ø–∏—Å—ñ–≤!\n";
    }
}
